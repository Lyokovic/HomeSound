HomeSound :

Sur raspberry pi et relié à une sortie audio
v0.1 - Unique **OK**
v0.1.1 - Interface web dynamique / temps réel **OK**
v0.2 - Contrôllable grâce à wiring pi et un système électronique adapté
v0.2.1 - Packaging
v0.3 - Personnalisation

v1.0 - Quand ce sera mûr ;)

Idées (ordre d'importance/interêt):
- Programmation de la radio pour allumage/arrêt automatique
- Forcage de l'arrêt de la lecture AirPlay
- Affichage des données AirPlay de la piste en cours
- Gestion d'annonces audio (avec choix d'enceintes)

- Problème de l'authentification pour certaines fonctionalitées ?

- Enceintes "désynchronisées" différents flux sur différentes enceintes (HomeSound v2)
	1 rPi par enceinte, commande avec API / transmission par PulseAudio...

v0.1 :
Deux sources audio : flux internet (radio) ou flux AirPlay (shairport)
Langage : Python 2
Base et messages : redis
Interface : Web - Bootstrap - Flask

Interface :
Interface minimale proposant aux choix une liste de flux avec une "icone" devant celui sélectionné
	Premier flux = éteint
	On peut évoluer avec un bouton activé désactivé (à voir)

On choisit le flux en le cliquant dans la liste, il est sélectionné et joué immédiatement si aucun flux AirPlay

Gestion des flux :
Le programme shairport envoie un message redis '/airPlaying' '0'/'1' si la lecture s'arrête/commence et set la variable 'airPlaying' à '0'/'1'
Losrqu'une lecture AirPlay commence, on coupe le flux radio, que l'on réactive si la lecture s'arrête.

Base Redis :
	/radio/<id>/name
	/radio/<id>/url
	/radio/current (dernière radio lue)
	/radioPlaying '0'/'1'
	/airPlaying '0'/'1'
Messages :
	/radioPlay ''/'<id>'/'-1' lis la radio courante/donnée/stoppe
	/airPlaying '0'/'1' lecture AirPlay en cours ou non

v0.1.1:
Ajout du JS/AJAX sur la page web pour mise à jour dynamique
Requêtes sur l'état de lecture par la page /playReq
Requêtes sur la station en cours de lecture par la page /stationReq

Mise à jour de la page web en temps réel grâce à la technologie des "server-sent events",
inscription aux "events" sur la page /stream.

v0.2:
Plusieurs périphériques de sortie contrôllés par les GPIO
	On utilise WiringPi pour python

Chaque périphérique a un input : bouton activation/désactivation, et un output : audio activé/desactivé
	Les périphériques sont représentés dans redis par un identifiant, et contiennnt : nom, pin out, pin in
		/device/<id>/name
		/device/<id>/buttonPin
		/device/<id>/audioPin
		/device/<id>/enabled
L'activation ou désactivation est gérée par un module python. Il reçoit deux messages : /device/enable <id> ou /device/disable <id>

Le module 'enceinte' est passif : il contient l'enceinte et le bouton seulement, pas d'intelligence. 3 fils
Le module électonique est simple : lorsque le pin out est actif, on ferme un relai, ouvert sinon.

L'interface Web est améliorée pour permettre de visualiser les périphériques actifs et les contrôler si besoin
Requête pour l'activation/désactivation d'une enceinte par la page /speakerReq

v0.2.1:
Amélioration de la communication web client-serveur
	- La mise à jour de la page (station en cours, enceintes actives...) est maintenant fait uniquement grâce aux server-sent events qui envoie le statut complet du système (voir ci-après).
	- Nouvelle URI /statusReq qui renvoit le statut complet du système (voir ci-après).

Le status complet du système est envoyé en JSON, il contient toutes les données dynamiques de la page :
{
	playing: '0'/'1'/'2',
	current: '<id de la station courante>',
	speakers: [{
		speaker: '<id de l'enceinte>',
		state: '0'/'1'
	},{
		...
	}]
}

v0.2.2:
Packaging du système
Unité SystemD, intégration de shairport ou non ?, utilisateur système dédié...

v0.3:
Amélioration de l'interface, permettant l'ajout de périphériques et de flux
